{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// contentlayer.config.ts\r\nimport { defineDocumentType, defineNestedType, makeSource } from 'contentlayer/source-files';\r\nimport remarkGfm from 'remark-gfm';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\n\r\n// 1) Define el tipo anidado correctamente\r\nconst Links = defineNestedType(() => ({\r\n    name: 'Links',\r\n    fields: {\r\n        demo: { type: 'string', required: false },\r\n        repo: { type: 'string', required: false },\r\n    },\r\n}));\r\n\r\n// 2) Documento Project\r\nexport const Project = defineDocumentType(() => ({\r\n    name: 'Project',\r\n    contentType: 'mdx',\r\n    filePathPattern: 'projects/**/*.mdx', // o 'projects/*.mdx' si no anidas carpetas\r\n    fields: {\r\n        title:   { type: 'string', required: true },\r\n        summary: { type: 'string', required: true },\r\n        date:    { type: 'date',   required: false },\r\n        tech:    { type: 'list',   of: { type: 'string' }, required: false },\r\n        images:  { type: 'list',   of: { type: 'string' }, required: true },\r\n        links:   { type: 'nested', of: Links,              required: false },\r\n    },\r\n    computedFields: {\r\n        slug: {\r\n            type: 'string',\r\n            resolve: (doc) => doc._raw.flattenedPath.replace(/^projects\\//, ''),\r\n        },\r\n        url: {\r\n            type: 'string',\r\n            resolve: (doc) => `/proyectos/${doc._raw.flattenedPath.replace(/^projects\\//, '')}`,\r\n        },\r\n        cover: {\r\n            type: 'string',\r\n            resolve: (doc) => doc.images?.[0] ?? 'cover.jpg',\r\n        },\r\n        coverUrl: {\r\n            type: 'string',\r\n            resolve: (doc) =>\r\n                `/projects/${doc._raw.flattenedPath.replace(/^projects\\//, '')}/${doc.images?.[0] ?? 'cover.jpg'}`,\r\n        },\r\n    },\r\n}));\r\n\r\n// 3) Source\r\nexport default makeSource({\r\n    contentDirPath: 'content',\r\n    documentTypes: [Project],\r\n    mdx: {\r\n        remarkPlugins: [remarkGfm],\r\n        rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: 'wrap' }]],\r\n    },\r\n});\r\n"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB,kBAAkB;AACjE,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AAGnC,IAAM,QAAQ,iBAAiB,OAAO;AAAA,EAClC,MAAM;AAAA,EACN,QAAQ;AAAA,IACJ,MAAM,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IACxC,MAAM,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,EAC5C;AACJ,EAAE;AAGK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC7C,MAAM;AAAA,EACN,aAAa;AAAA,EACb,iBAAiB;AAAA;AAAA,EACjB,QAAQ;AAAA,IACJ,OAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,SAAS,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC1C,MAAS,EAAE,MAAM,QAAU,UAAU,MAAM;AAAA,IAC3C,MAAS,EAAE,MAAM,QAAU,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IACnE,QAAS,EAAE,MAAM,QAAU,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,IAClE,OAAS,EAAE,MAAM,UAAU,IAAI,OAAoB,UAAU,MAAM;AAAA,EACvE;AAAA,EACA,gBAAgB;AAAA,IACZ,MAAM;AAAA,MACF,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,eAAe,EAAE;AAAA,IACtE;AAAA,IACA,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,cAAc,IAAI,KAAK,cAAc,QAAQ,eAAe,EAAE,CAAC;AAAA,IACrF;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,SAAS,CAAC,KAAK;AAAA,IACzC;AAAA,IACA,UAAU;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,QACN,aAAa,IAAI,KAAK,cAAc,QAAQ,eAAe,EAAE,CAAC,IAAI,IAAI,SAAS,CAAC,KAAK,WAAW;AAAA,IACxG;AAAA,EACJ;AACJ,EAAE;AAGF,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,OAAO;AAAA,EACvB,KAAK;AAAA,IACD,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe,CAAC,YAAY,CAAC,wBAAwB,EAAE,UAAU,OAAO,CAAC,CAAC;AAAA,EAC9E;AACJ,CAAC;",
  "names": []
}
